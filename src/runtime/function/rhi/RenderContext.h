#pragma once

#include <runtime/core/log/Log.h>
#include <runtime/core/math/Math.h>

namespace Horizon {

struct RenderContext {
    u32 width;
    u32 height;
    u32 swap_chain_image_count = 3;
};

enum class DescriptorType {
    DESCRIPTOR_TYPE_INVALID = 0,
    DESCRIPTOR_TYPE_UNIFORM_BUFFER = 1,
    DESCRIPTOR_TYPE_RW_BUFFER = 2,
    //DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 4,
    DESCRIPTOR_TYPE_TEXTURE,
    DESCRIPTOR_TYPE_RW_TEXTURE
};

//using DescriptorType = u32;

enum ShaderStageFlags {
    SHADER_STAGE_INVALID = 0,
    SHADER_STAGE_VERTEX_SHADER = 1,
    SHADER_STAGE_PIXEL_SHADER = 2,
    SHADER_STAGE_COMPUTE_SHADER = 2,
};

enum PipelineStageFlags {
    PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,
    PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,
    PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,
    PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,
    PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
    PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
    PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,
    PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,
    PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
    PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
    PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
    PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,
    PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,
    PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,
    PIPELINE_STAGE_HOST_BIT = 0x00004000,
    PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,
    PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,
    PIPELINE_STAGE_NONE = 0,
    PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000,
    PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000,
    PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000,
    PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 0x00200000,
    PIPELINE_STAGE_TASK_SHADER_BIT_NV = 0x00080000,
    PIPELINE_STAGE_MESH_SHADER_BIT_NV = 0x00100000,
    PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000,
    PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00400000,
    PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 0x00020000,
    PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
    PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
    PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
    PIPELINE_STAGE_NONE_KHR = VK_PIPELINE_STAGE_NONE,
    PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
};

enum MemoryAccessFlags {
    ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,
    ACCESS_INDEX_READ_BIT = 0x00000002,
    ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
    ACCESS_UNIFORM_READ_BIT = 0x00000008,
    ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
    ACCESS_SHADER_READ_BIT = 0x00000020,
    ACCESS_SHADER_WRITE_BIT = 0x00000040,
    ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
    ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
    ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
    ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
    ACCESS_TRANSFER_READ_BIT = 0x00000800,
    ACCESS_TRANSFER_WRITE_BIT = 0x00001000,
    ACCESS_HOST_READ_BIT = 0x00002000,
    ACCESS_HOST_WRITE_BIT = 0x00004000,
    ACCESS_MEMORY_READ_BIT = 0x00008000,
    ACCESS_MEMORY_WRITE_BIT = 0x00010000,
    ACCESS_NONE = 0,
    ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000,
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000,
    ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000,
    ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000,
    ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
    ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000,
    ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000,
    ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000,
    ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 0x00800000,
    ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000,
    ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000,
    ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR,
    ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
    ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
    ACCESS_NONE_KHR = VK_ACCESS_NONE,
    ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
};

enum class TextureType {
    TEXTURE_TYPE_INVALID = 0,
    TEXTURE_TYPE_1D,
    TEXTURE_TYPE_2D,
    TEXTURE_TYPE_3D,
};

enum class TextureFormat {
    TEXTURE_FORMAT_INVALID = 0,
    // unsigned int
    TEXTURE_FORMAT_R8_UINT,
    TEXTURE_FORMAT_RG8_UINT,
    TEXTURE_FORMAT_RGB8_UINT,
    TEXTURE_FORMAT_RGBA8_UINT,

    TEXTURE_FORMAT_R16_UINT,
    TEXTURE_FORMAT_RG16_UINT,
    TEXTURE_FORMAT_RGB16_UINT,
    TEXTURE_FORMAT_RGBA16_UINT,

    TEXTURE_FORMAT_R32_UINT,
    TEXTURE_FORMAT_RG32_UINT,
    TEXTURE_FORMAT_RGB32_UINT,
    TEXTURE_FORMAT_RGBA32_UINT,

    // normalized unsinged int
    TEXTURE_FORMAT_R8_UNORM,
    TEXTURE_FORMAT_RG8_UNORM,
    TEXTURE_FORMAT_RGB8_UNORM,
    TEXTURE_FORMAT_RGBA8_UNORM,

    TEXTURE_FORMAT_R16_UNORM,
    TEXTURE_FORMAT_RG16_UNORM,
    TEXTURE_FORMAT_RGB16_UNORM,
    TEXTURE_FORMAT_RGBA16_UNORM,

    // signed int
    TEXTURE_FORMAT_R8_SINT,
    TEXTURE_FORMAT_RG8_SINT,
    TEXTURE_FORMAT_RGB8_SINT,
    TEXTURE_FORMAT_RGBA8_SINT,

    TEXTURE_FORMAT_R16_SINT,
    TEXTURE_FORMAT_RG16_SINT,
    TEXTURE_FORMAT_RGB16_SINT,
    TEXTURE_FORMAT_RGBA16_SINT,

    TEXTURE_FORMAT_R32_SINT,
    TEXTURE_FORMAT_RG32_SINT,
    TEXTURE_FORMAT_RGB32_SINT,
    TEXTURE_FORMAT_RGBA32_SINT,

    // normalized signed int
    TEXTURE_FORMAT_R8_SNORM,
    TEXTURE_FORMAT_RG8_SNORM,
    TEXTURE_FORMAT_RGB8_SNORM,
    TEXTURE_FORMAT_RGBA8_SNORM,

    TEXTURE_FORMAT_R16_SNORM,
    TEXTURE_FORMAT_RG16_SNORM,
    TEXTURE_FORMAT_RGB16_SNORM,
    TEXTURE_FORMAT_RGBA16_SNORM,

    TEXTURE_FORMAT_R32_SNORM,
    TEXTURE_FORMAT_RG32_SNORM,
    TEXTURE_FORMAT_RGB32_SNORM,
    TEXTURE_FORMAT_RGBA32_SNORM,

    // signed float

    TEXTURE_FORMAT_R16_SFLOAT,
    TEXTURE_FORMAT_RG16_SFLOAT,
    TEXTURE_FORMAT_RGB16_SFLOAT,
    TEXTURE_FORMAT_RGBA16_SFLOAT,

    TEXTURE_FORMAT_R32_SFLOAT,
    TEXTURE_FORMAT_RG32_SFLOAT,
    TEXTURE_FORMAT_RGB32_SFLOAT,
    TEXTURE_FORMAT_RGBA32_SFLOAT,

    TEXTURE_FORMAT_D32_SFLOAT,

};

enum TextureUsage { TEXTURE_USAGE_R, TEXTURE_USAGE_RW };

inline VkDescriptorType ToVkDescriptorType(DescriptorType type) noexcept {
    switch (type) {
    case DescriptorType::DESCRIPTOR_TYPE_UNIFORM_BUFFER:
        return VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
    case DescriptorType::DESCRIPTOR_TYPE_RW_BUFFER:
        return VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
        //case DescriptorType::DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
        //	return VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
    case DescriptorType::DESCRIPTOR_TYPE_TEXTURE:
        return VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;
    case DescriptorType::DESCRIPTOR_TYPE_RW_TEXTURE:
        return VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;
    default:
        LOG_ERROR("invalid descriptor type");
        return VK_DESCRIPTOR_TYPE_MAX_ENUM;
    }
}

inline VkPipelineStageFlags ToVkPipelineStage(u32 flags) { return flags; }

inline VkAccessFlags ToVkMemoryAccessFlags(MemoryAccessFlags flags) { return flags; }

inline VkShaderStageFlags ToVkShaderStageFlags(u32 stage) noexcept {
    VkShaderStageFlags flags = 0;
    if ((stage & SHADER_STAGE_VERTEX_SHADER) != 0u) {
        flags |= VK_SHADER_STAGE_VERTEX_BIT;
    }
    if ((stage & SHADER_STAGE_PIXEL_SHADER) != 0u) {
        flags |= VK_SHADER_STAGE_FRAGMENT_BIT;
    }
    if ((stage & SHADER_STAGE_COMPUTE_SHADER) != 0u) {
        flags |= VK_SHADER_STAGE_COMPUTE_BIT;
    }
    if (flags == 0) {
        LOG_ERROR("invalid shader stage: ", stage);
    }
    return flags;
}

inline VkImageType ToVkImageType(TextureType type) {
    switch (type) {
    case Horizon::TextureType::TEXTURE_TYPE_1D:
        return VK_IMAGE_TYPE_1D;
    case Horizon::TextureType::TEXTURE_TYPE_2D:
        return VK_IMAGE_TYPE_2D;
    case Horizon::TextureType::TEXTURE_TYPE_3D:
        return VK_IMAGE_TYPE_3D;
    default:
        LOG_ERROR("invalid image type");
        return VK_IMAGE_TYPE_MAX_ENUM;
    }
}

inline VkFormat ToVkImageFormat(TextureFormat format) {
    switch (format) {
    case Horizon::TextureFormat::TEXTURE_FORMAT_INVALID:
        LOG_ERROR("invalid image format");
        return VK_FORMAT_MAX_ENUM;
    case Horizon::TextureFormat::TEXTURE_FORMAT_R8_UINT:
        return VK_FORMAT_R8_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RG8_UINT:
        return VK_FORMAT_R8G8_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGB8_UINT:
        return VK_FORMAT_R8G8B8_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGBA8_UINT:
        return VK_FORMAT_R8G8B8A8_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_R16_UINT:
        return VK_FORMAT_R16_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RG16_UINT:
        return VK_FORMAT_R16G16_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGB16_UINT:
        return VK_FORMAT_R16G16B16_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGBA16_UINT:
        return VK_FORMAT_R16G16B16A16_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_R32_UINT:
        return VK_FORMAT_R32_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RG32_UINT:
        return VK_FORMAT_R32G32_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGB32_UINT:
        return VK_FORMAT_R32G32_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGBA32_UINT:
        return VK_FORMAT_R32G32B32A32_UINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_R8_UNORM:
        return VK_FORMAT_R8_UNORM;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RG8_UNORM:
        return VK_FORMAT_R8G8_UNORM;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGB8_UNORM:
        return VK_FORMAT_R8G8B8_UNORM;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGBA8_UNORM:
        return VK_FORMAT_R8G8B8A8_UNORM;
    case Horizon::TextureFormat::TEXTURE_FORMAT_R16_UNORM:
        return VK_FORMAT_R16_UNORM;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RG16_UNORM:
        return VK_FORMAT_R16G16_UNORM;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGB16_UNORM:
        return VK_FORMAT_R16G16B16_UNORM;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGBA16_UNORM:
        return VK_FORMAT_R16G16B16A16_UNORM;
    case Horizon::TextureFormat::TEXTURE_FORMAT_R8_SINT:
        return VK_FORMAT_R8_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RG8_SINT:
        return VK_FORMAT_R8G8_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGB8_SINT:
        return VK_FORMAT_R8G8B8_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGBA8_SINT:
        return VK_FORMAT_R8G8B8A8_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_R16_SINT:
        return VK_FORMAT_R16_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RG16_SINT:
        return VK_FORMAT_R16G16_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGB16_SINT:
        return VK_FORMAT_R16G16B16_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGBA16_SINT:
        return VK_FORMAT_R16G16B16A16_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_R32_SINT:
        return VK_FORMAT_R32_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RG32_SINT:
        return VK_FORMAT_R32G32_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGB32_SINT:
        return VK_FORMAT_R32G32B32_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGBA32_SINT:
        return VK_FORMAT_R32G32B32A32_SINT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_R16_SFLOAT:
        return VK_FORMAT_R16_SFLOAT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RG16_SFLOAT:
        return VK_FORMAT_R16G16_SFLOAT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGB16_SFLOAT:
        return VK_FORMAT_R16G16B16_SFLOAT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGBA16_SFLOAT:
        return VK_FORMAT_R16G16B16A16_SFLOAT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_R32_SFLOAT:
        return VK_FORMAT_R32_SFLOAT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RG32_SFLOAT:
        return VK_FORMAT_R32G32_SFLOAT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGB32_SFLOAT:
        return VK_FORMAT_R32G32B32_SFLOAT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_RGBA32_SFLOAT:
        return VK_FORMAT_R32G32B32A32_SFLOAT;
    case Horizon::TextureFormat::TEXTURE_FORMAT_D32_SFLOAT:
        return VK_FORMAT_D32_SFLOAT;
    default:
        LOG_ERROR("invalid format");
        return VK_FORMAT_MAX_ENUM;
    }
}

inline VkImageUsageFlags ToVkImageUsage(u32 usage) {
    VkImageUsageFlags flags = 0;
    if ((usage & TextureUsage::TEXTURE_USAGE_R) != 0u) {
        flags |= VK_IMAGE_USAGE_SAMPLED_BIT;
    }
    if ((usage & TextureUsage::TEXTURE_USAGE_RW) != 0u) {
        flags |= VK_IMAGE_USAGE_STORAGE_BIT;
        flags |= VK_IMAGE_USAGE_SAMPLED_BIT;
    }
    if (flags == 0) {
        LOG_ERROR("invalid image usage: ", usage);
        return {};
    }
    return flags;
}

inline VkImageLayout ToVkImageLayout(TextureUsage usage) {
    switch (usage) {
    case Horizon::TEXTURE_USAGE_R:
        return VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
        break;
    case Horizon::TEXTURE_USAGE_RW:
        return VK_IMAGE_LAYOUT_GENERAL;
        break;
    default:
        return VK_IMAGE_LAYOUT_MAX_ENUM;
        break;
    }
}

struct PushConstantRange {
    u32 stages;
    u32 offset;
    u32 size;
    void *value = nullptr;
};

struct PushConstants {
    std::vector<PushConstantRange> ranges;
};

enum class PipelineType { GRAPHICS, COMPUTE, RAYTRACING };

} // namespace Horizon